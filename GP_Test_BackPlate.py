import numpy as np
import csv
import GP_Data_Formatting as gpF
import GP_Data_Modeling as gpM
import GP_Sample_Pick as gpSP
import matplotlib.pyplot as plt

test_labels = ["", "Test 1: Random", "Test 2: Max Speed", "Test 3: Min Speed"]
output_labels = ["Plastic length- Front Plate (m)",	"Plastic length-Back Plate(m)", "Penetration depth (m)", "Lip Height (m)"]
data_raw = np.genfromtxt('C:/Users/andyl/Documents/school/PurdueY1Summer/ME Summer Project/GP models/Aluminum Abaqus Jobs - MOST RECENT JOBS LIST.csv', delimiter=',') # PLace file path here

data_T = gpF.data_transform(data_raw)

# data_T = gpF.back_perf_remove_max(data_T)
data_T = gpF.back_perf_remove_min(data_T)
data_T = gpF.data_normalize(data_T)
data_formatted = gpF.data_splitter(data_T)

data_formatted.pop(2) # only for back plate testing

expected, dataS = gpSP.sample_pick(data_formatted[0],2)

rms_values = []
 
test_set = []
test_case = 2

output = 2
output_case = output # Output that GP is modeling for
set = 0 # start at the 1st set
predicted_vals = []
target_vals = []
abs_error_set = []
while set < len(data_formatted): # Run through all the sets of data
    expected, dataS = gpSP.sample_pick(data_formatted[set],test_case)
    predicted = gpM.prediction(dataS, output_case, expected, set)
    predicted_vals.append(predicted[expected])
    target_vals.append(dataS[expected,(output_case+2)])
    # abs_error =  predicted[expected] - dataS[expected,(output_case+2)] # Finding abs error
    # abs_error_set.append(abs_error) # Adds value to list
    # print("set: ", set)
    set += 1
abs_error_set = np.subtract(predicted_vals, target_vals)
test_set.append(abs_error_set) # Adds each set of abs error to a list
rms_values.append(gpM.rmse(predicted_vals, target_vals))
output += 1

fig1, ax1 = plt.subplots()
ax1.set_title(test_labels[test_case])
ax1.boxplot(test_set[0:]) # Plot each output
plt.xticks([1, 2, 3, 4], output_labels, rotation = 0)
plt.xlabel("Outputs")
plt.show()

print(rms_values)
print("a") # Ending indicator
# print(data_formatted[8])

# gpM.prediction(data_formatted[8], 2)