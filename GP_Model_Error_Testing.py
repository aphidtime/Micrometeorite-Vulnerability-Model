import numpy as np
import csv
import random as rand
from matplotlib import pyplot as plt

from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, ConstantKernel as C
from sklearn.metrics import mean_squared_error


data = np.genfromtxt('C:/Users/andyl/Documents/school/PurdueY1Summer/ME Summer Project/GP models/test_data_1.csv', delimiter=',')
np.nan_to_num(data, copy=False, nan=0.0, posinf=None, neginf=None)
data_copy = data # making a copy for error testing

titles = ["",	"Plastic length- Front Plate (m)",	"Plastic length-Back Plate(m)", "Perforation Diameter (m)", "Lip Height (m)"]

counter = 2 #set count being tested


# remove random row
number_of_rows = data.shape[0]
np.random.seed(1)
# random_indices = rand.randint(0,number_of_rows-1) # Remove random samples

# for testing purposes to check consistency in values
random_indices = 8 
print(random_indices)
random_rows = data[random_indices, :]
print("Initial Velocity: ",random_rows[0])

data = np.delete(data, random_indices, 0) # Removing random sample
# print(data)

# ----------------------------------------------------------------------
#  First the noiseless case
X = np.atleast_2d(data[:,0]).T
X_pred = np.atleast_2d(data_copy[:,0]).T # Values we are trying to predict and compare

# Observations
y = data[:,counter]

target = data_copy[:,counter]
# Mesh the input space for evaluations of the real function, the prediction and
# its MSE
x = np.atleast_2d(np.linspace(0, 1.2, 100)).T

# Instantiate a Gaussian Process model
kernel = C(1.0, (1e-3, 1e3)) * RBF(10, (1e-2, 1e2))
gp = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)

# Fit to data using Maximum Likelihood Estimation of the parameters
gp.fit(X, y)

# Make the prediction on the meshed x-axis (ask for MSE as well)
y_pred, sigma = gp.predict(x, return_std=True)


# ----------------------------------------------------------------------
# Plot the function, the prediction and the 95% confidence interval based on
# the MSE
plt.figure()
plt.plot(X, y, 'r.', markersize=10, label='Observations')
plt.plot(x, y_pred, 'b-', label='Prediction')
plt.fill(np.concatenate([x, x[::-1]]),
         np.concatenate([y_pred - 1.9600 * sigma,
                        (y_pred + 1.9600 * sigma)[::-1]]),
         alpha=.5, fc='b', ec='None', label='95% confidence interval')
plt.xlabel("Initial Velocity")
plt.ylabel(titles[counter])
plt.ylim(-0.25, 1.5)
plt.legend(loc='upper left')
plt.show()

# Error Data Stuff
y_pred, sigma_pred = gp.predict(X_pred, return_std=True)
# print(y_pred)
rms = mean_squared_error(target, y_pred, squared=False)
# rmse = np.linalg.norm(y_pred - target) / number_of_rows
def rmse(predictions, targets):
    return np.sqrt(((predictions - targets) ** 2).mean())
# print(rms)
# print(sigma_pred)
# print(rmse(y_pred, target))
abs_error = np.subtract(y_pred, target)
# print(y_pred)
print(abs_error)