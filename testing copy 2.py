import numpy as np
import csv
from matplotlib import pyplot as plt

from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, ConstantKernel as C

np.random.seed(1)
# with open('C:/Users/andyl/Documents/school/PurdueY1Summer/ME Summer Project/test_data_1.csv','w') as file:
#     employee = csv.reader(file)

# data = []
# for row in employee:
#     data.append(row) 

data = np.genfromtxt('C:/Users/andyl/Documents/school/PurdueY1Summer/ME Summer Project/GP models/test_data_1.csv', delimiter=',')
# values = np.array([[1.,2], [3.,4], [5.,1], [6.,5],[4, 7.],[ 9,8.], [1.,2], [3.,4], [5.,1], [6.,5],[4, 7.],[ 9,8.],[1.,2], [3.,4], [5.,1], [6.,5],[4, 7.],[ 9,8.]])
# x = values[:,0]
# y = values[:,1]
# print(values)

titles = ["Initial Velocity (m/s)",	"Residual Velocity (m/s)",	"Plastic length- Front Plate (m)",	"Plastic length-Back Plate(m)", "Perforation Diameter (m)"]

counter = 2 #set count being tested

# ----------------------------------------------------------------------
#  First the noiseless case
X = np.atleast_2d(data[:,0]).T

# Observations
y = data[:,counter]

# Mesh the input space for evaluations of the real function, the prediction and
# its MSE
x = np.atleast_2d(np.linspace(0, 1.2, 100)).T

# Instantiate a Gaussian Process model
kernel = C(1.0, (1e-3, 1e3)) * RBF(10, (1e-2, 1e2))
gp = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)

# Fit to data using Maximum Likelihood Estimation of the parameters
gp.fit(X, y)

# Make the prediction on the meshed x-axis (ask for MSE as well)
y_pred, sigma = gp.predict(x, return_std=True)

# Plot the function, the prediction and the 95% confidence interval based on
# the MSE
plt.figure()
plt.plot(X, y, 'r.', markersize=10, label='Observations')
plt.plot(x, y_pred, 'b-', label='Prediction')
plt.fill(np.concatenate([x, x[::-1]]),
         np.concatenate([y_pred - 1.9600 * sigma,
                        (y_pred + 1.9600 * sigma)[::-1]]),
         alpha=.5, fc='b', ec='None', label='95% confidence interval')
plt.xlabel(titles[0])
plt.ylabel(titles[counter])
plt.ylim(-0.25, 1.5)
plt.legend(loc='upper left')
plt.show()  