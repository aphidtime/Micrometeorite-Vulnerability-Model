import numpy as np
import csv
import random as rand
from matplotlib import pyplot as plt

from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, ConstantKernel as C
from sklearn.metrics import mean_squared_error

def prediction(data, output, expected, set):
    counter = output + 2
    data_copy = data # making a copy for error testing
    data = np.delete(data, expected, 0)
    X = np.atleast_2d(data[:,0]).T
    x = np.atleast_2d(np.linspace(0, 1.2, 100)).T

    X_pred = np.atleast_2d(data_copy[:,0]).T # Values we are trying to predict and compare    
    y = data[:, counter]
    titles = ["","Plastic length- Front Plate (m)", "Plastic length-Back Plate(m)", "Penetration depth (m)", "Lip Height (m)"]

    # Instantiate a Gaussian Process model
    kernel = C(1.0, (1e-3, 1e3)) * RBF(10, (1e-2, 1e2))
    gp = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)

    # Fit to data using Maximum Likelihood Estimation of the parameters
    gp.fit(X, y)

    # Make the prediction on the meshed x-axis (ask for MSE as well)
    y_pred, sigma = gp.predict(x, return_std=True)

    # plt.figure(set)
    # plt.plot(X, y, 'r.', markersize=10, label='Observations')
    # plt.plot(x, y_pred, 'b-', label='Prediction')
    # plt.fill(np.concatenate([x, x[::-1]]),
    #         np.concatenate([y_pred - 1.9600 * sigma,
    #                         (y_pred + 1.9600 * sigma)[::-1]]),
    #         alpha=.5, fc='b', ec='None', label='95% confidence interval')
    # plt.xlabel("Initial Velocity")
    # plt.ylabel(titles[(output+1)])
    # plt.ylim(-0.25, 1.5)
    # plt.legend(loc='upper left')
    # plt.title("Data set: %d" % (set+1))
    # plt.show()

    y_pred, sigma_pred = gp.predict(X_pred, return_std=True)

    return y_pred
 
def rmse(predictions, targets):
    return np.sqrt(((np.subtract(predictions, targets)) ** 2).mean())
 