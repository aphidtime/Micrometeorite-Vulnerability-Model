# Support Vector Machine
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import numpy as np #fixed
from sklearn.pipeline import make_pipeline #fixed
from sklearn.preprocessing import StandardScaler #fixed
from sklearn.svm import SVC #fixed
X_all = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1], [2,-1], [3,-1], [1,3], [-1, -1], [-2, -1], [1, 1], [2, 1], [2,-1], [3,-1], [1,3]])# change to your data
y_all = np.array([1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2]) # change to your
X_train = X_all[0:8,]
y_train = y_all[0:8,]
X_test = X_all[8:,]
y_test = y_all[8:,]
clf = make_pipeline(StandardScaler(), SVC(gamma='auto'))#fixed
clf.fit(X_train, y_train) #fixed
predictions = clf.predict(X_test)
cm = confusion_matrix(y_test, predictions, labels=clf.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=clf.classes_)
disp.plot()
plt.show()
print(clf.predict([[-0.8, -1]])) # make a prediction


# Tree
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import numpy as np #fixed
from sklearn.tree import DecisionTreeClassifier #fixed
X_all = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1], [2,-1], [3,-1], [1,3], [-1, -1], [-2, -1], [1, 1], [2, 1], [2,-1], [3,-1], [1,3]])# change to your data
y_all = np.array([1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2]) # change to your
X_train = X_all[0:8,]
y_train = y_all[0:8,]
X_test = X_all[8:,]
y_test = y_all[8:,]

clf = DecisionTreeClassifier()#fixed
clf.fit(X_train, y_train)  #fixed
predictions = clf.predict(X_test)
cm = confusion_matrix(y_test, predictions, labels=clf.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=clf.classes_)
disp.plot()
plt.show()
print(clf.predict([[-0.8, -1]])) # make a prediction

