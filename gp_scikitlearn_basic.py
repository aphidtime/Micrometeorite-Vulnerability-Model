import numpy as np

from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, ConstantKernel as C

def f(x):
    """The function to predict."""
    return x * np.sin(x)

# Input samples
X = np.atleast_2d([1., 3., 5., 6., 7., 8.]).T
print(X)
# Output samples
y = f(X).ravel()

# Mesh the input space for evaluations of the real function, the prediction and
# its MSE
# Data to make the predictions
x = np.atleast_2d(np.linspace(0, 10, 1001)).T


# Instantiate a Gaussian Process model
kernel = C(1.0, (1e-3, 1e3)) * RBF(10, (1e-2, 1e2))
gp = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)

# Fit to data using Maximum Likelihood Estimation of the parameters
gp.fit(X, y)

# Make the prediction on the meshed x-axis (ask for MSE as well)
y_pred, sigma = gp.predict(x, return_std=True)
print(y_pred)