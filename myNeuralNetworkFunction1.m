function [Y,Xf,Af] = myNeuralNetworkFunction1(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 04-Apr-2022 15:23:33.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx2 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1

x1_step1.xoffset = [0;0];
x1_step1.gain = [2;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.4278124884870413425;-3.6000348042062015885;2.5573560164644169035;-1.3762957317180664063;-0.4919390646640243725;-0.87049121262364859142;-1.2076249099226112893;2.4730784358750388385;3.5457212885754683107;4.2198396709048218156];
IW1_1 = [2.9891273854046178649 -3.2477445640164455121;2.7905918860401897064 3.267518571692181073;-2.9453263551470714177 3.1483471126132940299;4.391154638878823846 -0.05250331990838637275;1.7584916602008546782 4.0160313343721378843;-2.9439066740955941448 -3.2603687720428990993;-4.2598902527209565605 -1.5469229805067790107;0.51322259946360615501 4.3837068959610210328;3.7349099037399886569 2.2443042625500568832;3.1928825928584734228 3.3350396425747983464];

% Layer 2
b2 = -0.2291175646193525095;
LW2_1 = [0.13132891808844046611 0.12165386570034386615 0.29993294709294560096 0.23196190002229732929 0.20861972835676181881 0.27634665851304041073 -0.31599886218925266057 0.16863335652313543589 0.53551779948264932596 -0.39098018807465723112];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
